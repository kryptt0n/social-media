name: Deploy (self-hosted)

on:
  push:
    branches: [ main ]

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.calc.outputs.services }}
      restart_all: ${{ steps.calc.outputs.restart_all }}
    steps:
      - name: Checkout repo (with history + submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install yq (for compose parsing)
        run: |
          sudo curl -L https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 \
            -o /usr/local/bin/yq && sudo chmod +x /usr/local/bin/yq

      - name: Calculate changed services (name-agnostic + submodule-aware)
        id: calc
        env:
          BEFORE: ${{ github.event.before }}
          AFTER:  ${{ github.sha }}
        run: |
          set -euo pipefail

          # 1) Resolve compose file
          COMPOSE_FILE="$(ls -1 docker-compose.yml compose.yml compose.yaml 2>/dev/null | head -n1 || true)"
          [ -z "${COMPOSE_FILE:-}" ] && echo "No compose file found" && exit 1

          # 2) Normalize BEFORE (handle null SHA)
          if [ -z "${BEFORE:-}" ] || [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            BEFORE="$(git rev-parse HEAD~1 2>/dev/null || echo "$AFTER")"
          fi

          # 3) Compute changed files in parent repo
          CHANGED_FILES="$(git diff --name-only "$BEFORE" "$AFTER" || true)"

          # 4) Full refresh triggers
          if echo "$CHANGED_FILES" | grep -Eiq '(^|/)(docker-compose|compose)\.(yml|yaml)$|(^|/)\.env$|^\.github/workflows/'; then
            echo "restart_all=true" >> "$GITHUB_OUTPUT"
            echo "services=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 5) Parse existing compose services
          mapfile -t EXISTING < <(yq -r '.services | keys[]' "$COMPOSE_FILE" | sort -u)

          # Helper: function to check if a service exists in compose
          exists_in_compose () { printf '%s\n' "${EXISTING[@]}" | grep -qx "$1"; }

          # 6) If BACKEND submodule pointer changed at root → restart all services that mount ./social-media-backend/
          if echo "$CHANGED_FILES" | grep -Eq '^social-media-backend($|/)'; then
            mapfile -t BACKEND_SERVICES < <(
              yq -r '
                .services
                | to_entries[]
                | select(
                    (.value.volumes // [])
                    | any(. ; test("^\\./social-media-backend/"))
                  )
                | .key
              ' "$COMPOSE_FILE" | sort -u
            )
            SERVICES="$(printf '%s ' "${BACKEND_SERVICES[@]}")"
            echo "services=$SERVICES"   >> "$GITHUB_OUTPUT"
            echo "restart_all=false"    >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 7) If FRONTEND submodule pointer changed at root → restart frontend (if present)
          if echo "$CHANGED_FILES" | grep -Eq '^social-media-frontend($|/)'; then
            if exists_in_compose "frontend"; then
              echo "services=frontend"  >> "$GITHUB_OUTPUT"
              echo "restart_all=false"  >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          # 8) Otherwise: map file-paths → candidate services
          mapfile -t CANDIDATES < <(printf '%s\n' "$CHANGED_FILES" | awk -F/ '
            $1=="social-media-frontend" {print "frontend"}
            $1=="social-media-backend" && NF>=2 {print $2}
          ' | sort -u)

          SERVICES=""
          for s in "${CANDIDATES[@]:-}"; do
            if printf '%s\n' "${EXISTING[@]}" | grep -qx "$s"; then
              SERVICES="$SERVICES $s"
            fi
          done
          SERVICES="$(echo "$SERVICES" | xargs || true)"

          echo "services=$SERVICES"   >> "$GITHUB_OUTPUT"
          echo "restart_all=false"    >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: self-hosted
    needs: detect-changes
    env:
      APP_DIR: /home/vityzy/social-media
    steps:
      - name: Prep Git safe.directory (optional but handy)
        run: |
          set -euo pipefail
          git config --global --add safe.directory "$APP_DIR" || true

      - name: Pull latest code into server clone (keeps server-side .env)
        run: |
          set -euo pipefail
          cd "$APP_DIR"
          git fetch --all
          git reset --hard origin/main
          git submodule sync --recursive
          git submodule update --init --recursive --remote

      - name: Restart with Docker Compose (auto-loads .env beside compose)
        run: |
          set -euo pipefail
          cd "$APP_DIR"

          if [ "${{ needs.detect-changes.outputs.restart_all }}" = "true" ]; then
            echo "Compose/.env changed → full refresh"
            docker compose up -d
            exit 0
          fi

          if [ -z "${{ needs.detect-changes.outputs.services }}" ]; then
            echo "No specific service matched → safe refresh all"
            docker compose up -d
          else
            echo "Restarting changed services: ${{ needs.detect-changes.outputs.services }}"
            docker compose restart ${{ needs.detect-changes.outputs.services }}
          fi

      - name: Cleanup
        run: docker image prune -f || true

